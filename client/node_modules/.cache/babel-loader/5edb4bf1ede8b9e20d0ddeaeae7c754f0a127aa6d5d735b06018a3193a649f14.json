{"ast":null,"code":"var _jsxFileName = \"/Users/sitewang/github_hackathon/client/src/components/InterstellarMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box } from '@chakra-ui/react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst planets = [{\n  name: 'Earth',\n  position: [0, 0, 0],\n  radius: 1,\n  color: '#1a75ff'\n}, {\n  name: 'Mars',\n  position: [3, 0, 0],\n  radius: 0.5,\n  color: '#ff4d4d'\n}, {\n  name: 'Jupiter',\n  position: [8, 0, 0],\n  radius: 2,\n  color: '#ffcc00'\n}];\nexport const InterstellarMap = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color('#000000');\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 5, 5);\n    scene.add(directionalLight);\n\n    // Camera position\n    camera.position.z = 15;\n    camera.position.y = 5;\n    camera.lookAt(0, 0, 0);\n\n    // Add OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Add planets\n    planets.forEach(planet => {\n      const geometry = new THREE.SphereGeometry(planet.radius, 32, 32);\n      const material = new THREE.MeshStandardMaterial({\n        color: planet.color,\n        roughness: 0.7,\n        metalness: 0.3\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set(...planet.position);\n      scene.add(sphere);\n\n      // Add orbit line\n      const orbitGeometry = new THREE.RingGeometry(Math.sqrt(planet.position[0] ** 2 + planet.position[2] ** 2) - 0.1, Math.sqrt(planet.position[0] ** 2 + planet.position[2] ** 2) + 0.1, 64);\n      const orbitMaterial = new THREE.MeshBasicMaterial({\n        color: 0x444444,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.3\n      });\n      const orbit = new THREE.Mesh(orbitGeometry, orbitMaterial);\n      orbit.rotation.x = Math.PI / 2;\n      scene.add(orbit);\n    });\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!mountRef.current) return;\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      var _mountRef$current;\n      window.removeEventListener('resize', handleResize);\n      (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: mountRef,\n    w: \"100%\",\n    h: \"100%\",\n    borderRadius: \"xl\",\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(InterstellarMap, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = InterstellarMap;\nvar _c;\n$RefreshReg$(_c, \"InterstellarMap\");","map":{"version":3,"names":["React","useEffect","useRef","Box","THREE","OrbitControls","jsxDEV","_jsxDEV","planets","name","position","radius","color","InterstellarMap","_s","mountRef","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","z","y","lookAt","controls","enableDamping","dampingFactor","forEach","planet","geometry","SphereGeometry","material","MeshStandardMaterial","roughness","metalness","sphere","Mesh","orbitGeometry","RingGeometry","Math","sqrt","orbitMaterial","MeshBasicMaterial","side","DoubleSide","transparent","opacity","orbit","rotation","x","PI","animate","requestAnimationFrame","update","render","handleResize","width","height","aspect","updateProjectionMatrix","window","addEventListener","_mountRef$current","removeEventListener","removeChild","ref","w","h","borderRadius","overflow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sitewang/github_hackathon/client/src/components/InterstellarMap.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box } from '@chakra-ui/react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\ninterface Planet {\n  name: string;\n  position: [number, number, number];\n  radius: number;\n  color: string;\n}\n\nconst planets: Planet[] = [\n  { name: 'Earth', position: [0, 0, 0], radius: 1, color: '#1a75ff' },\n  { name: 'Mars', position: [3, 0, 0], radius: 0.5, color: '#ff4d4d' },\n  { name: 'Jupiter', position: [8, 0, 0], radius: 2, color: '#ffcc00' },\n];\n\nexport const InterstellarMap: React.FC = () => {\n  const mountRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color('#000000');\n    \n    const camera = new THREE.PerspectiveCamera(\n      75,\n      mountRef.current.clientWidth / mountRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    \n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 5, 5);\n    scene.add(directionalLight);\n\n    // Camera position\n    camera.position.z = 15;\n    camera.position.y = 5;\n    camera.lookAt(0, 0, 0);\n\n    // Add OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Add planets\n    planets.forEach(planet => {\n      const geometry = new THREE.SphereGeometry(planet.radius, 32, 32);\n      const material = new THREE.MeshStandardMaterial({\n        color: planet.color,\n        roughness: 0.7,\n        metalness: 0.3,\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set(...planet.position);\n      scene.add(sphere);\n\n      // Add orbit line\n      const orbitGeometry = new THREE.RingGeometry(\n        Math.sqrt(planet.position[0] ** 2 + planet.position[2] ** 2) - 0.1,\n        Math.sqrt(planet.position[0] ** 2 + planet.position[2] ** 2) + 0.1,\n        64\n      );\n      const orbitMaterial = new THREE.MeshBasicMaterial({\n        color: 0x444444,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.3,\n      });\n      const orbit = new THREE.Mesh(orbitGeometry, orbitMaterial);\n      orbit.rotation.x = Math.PI / 2;\n      scene.add(orbit);\n    });\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!mountRef.current) return;\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current?.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return (\n    <Box\n      ref={mountRef}\n      w=\"100%\"\n      h=\"100%\"\n      borderRadius=\"xl\"\n      overflow=\"hidden\"\n      position=\"relative\"\n    />\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}