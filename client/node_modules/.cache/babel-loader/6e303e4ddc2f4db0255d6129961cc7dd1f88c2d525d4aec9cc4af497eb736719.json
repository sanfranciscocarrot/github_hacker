{"ast":null,"code":"var _jsxFileName = \"/Users/sitewang/github_hackathon/client/src/components/InterstellarMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box } from '@chakra-ui/react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Planet data sourced from NASA's planetary fact sheets\nconst planets = [{\n  name: 'Mercury',\n  position: [1.5, 0, 0],\n  radius: 0.4,\n  color: '#A0522D',\n  realRadius: 2439.7,\n  distanceFromSun: 0.387,\n  orbitalPeriod: 0.24\n}, {\n  name: 'Venus',\n  position: [2.8, 0, 0],\n  radius: 0.9,\n  color: '#DEB887',\n  realRadius: 6051.8,\n  distanceFromSun: 0.723,\n  orbitalPeriod: 0.62\n}, {\n  name: 'Earth',\n  position: [4, 0, 0],\n  radius: 1,\n  color: '#1a75ff',\n  realRadius: 6371,\n  distanceFromSun: 1,\n  orbitalPeriod: 1\n}, {\n  name: 'Mars',\n  position: [5.5, 0, 0],\n  radius: 0.5,\n  color: '#ff4d4d',\n  realRadius: 3389.5,\n  distanceFromSun: 1.524,\n  orbitalPeriod: 1.88\n}, {\n  name: 'Jupiter',\n  position: [8, 0, 0],\n  radius: 2,\n  color: '#ffcc00',\n  realRadius: 69911,\n  distanceFromSun: 5.203,\n  orbitalPeriod: 11.86\n}, {\n  name: 'Saturn',\n  position: [11, 0, 0],\n  radius: 1.8,\n  color: '#F4D03F',\n  realRadius: 58232,\n  distanceFromSun: 9.537,\n  orbitalPeriod: 29.46\n}, {\n  name: 'Uranus',\n  position: [14, 0, 0],\n  radius: 1.2,\n  color: '#85C1E9',\n  realRadius: 25362,\n  distanceFromSun: 19.191,\n  orbitalPeriod: 84.01\n}, {\n  name: 'Neptune',\n  position: [17, 0, 0],\n  radius: 1.2,\n  color: '#3498DB',\n  realRadius: 24622,\n  distanceFromSun: 30.069,\n  orbitalPeriod: 164.79\n}];\nexport const InterstellarMap = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color('#000000');\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light (Sun)\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(-5, 5, 0);\n    scene.add(directionalLight);\n\n    // Add the Sun\n    const sunGeometry = new THREE.SphereGeometry(1.5, 32, 32);\n    const sunMaterial = new THREE.MeshStandardMaterial({\n      color: 0xffff00,\n      emissive: 0xffff00,\n      emissiveIntensity: 1,\n      metalness: 0,\n      roughness: 1\n    });\n    const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n    sun.position.set(-3, 0, 0);\n    scene.add(sun);\n\n    // Add point light at Sun's position\n    const sunLight = new THREE.PointLight(0xffffff, 2, 100);\n    sunLight.position.copy(sun.position);\n    scene.add(sunLight);\n\n    // Camera position\n    camera.position.z = 20;\n    camera.position.y = 10;\n    camera.lookAt(0, 0, 0);\n\n    // Add OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.maxDistance = 50;\n    controls.minDistance = 5;\n\n    // Add planets\n    const planetMeshes = planets.map(planet => {\n      const geometry = new THREE.SphereGeometry(planet.radius, 32, 32);\n      const material = new THREE.MeshStandardMaterial({\n        color: planet.color,\n        roughness: 0.7,\n        metalness: 0.3\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set(...planet.position);\n      scene.add(sphere);\n\n      // Add orbit line\n      const orbitGeometry = new THREE.RingGeometry(Math.sqrt(planet.position[0] ** 2 + planet.position[2] ** 2) - 0.1, Math.sqrt(planet.position[0] ** 2 + planet.position[2] ** 2) + 0.1, 64);\n      const orbitMaterial = new THREE.MeshBasicMaterial({\n        color: 0x444444,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.3\n      });\n      const orbit = new THREE.Mesh(orbitGeometry, orbitMaterial);\n      orbit.rotation.x = Math.PI / 2;\n      scene.add(orbit);\n      return {\n        mesh: sphere,\n        orbitalPeriod: planet.orbitalPeriod\n      };\n    });\n\n    // Animation loop\n    let time = 0;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      time += 0.005;\n\n      // Rotate planets\n      planetMeshes.forEach((planet, index) => {\n        const speed = 0.1 / planet.orbitalPeriod;\n        const radius = planets[index].position[0];\n        planet.mesh.position.x = Math.cos(time * speed) * radius;\n        planet.mesh.position.z = Math.sin(time * speed) * radius;\n        planet.mesh.rotation.y += 0.01;\n      });\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!mountRef.current) return;\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      var _mountRef$current;\n      window.removeEventListener('resize', handleResize);\n      (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: mountRef,\n    w: \"100%\",\n    h: \"100%\",\n    borderRadius: \"xl\",\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(InterstellarMap, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = InterstellarMap;\nvar _c;\n$RefreshReg$(_c, \"InterstellarMap\");","map":{"version":3,"names":["React","useEffect","useRef","Box","THREE","OrbitControls","jsxDEV","_jsxDEV","planets","name","position","radius","color","realRadius","distanceFromSun","orbitalPeriod","InterstellarMap","_s","mountRef","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","sunGeometry","SphereGeometry","sunMaterial","MeshStandardMaterial","emissive","emissiveIntensity","metalness","roughness","sun","Mesh","sunLight","PointLight","copy","z","y","lookAt","controls","enableDamping","dampingFactor","maxDistance","minDistance","planetMeshes","map","planet","geometry","material","sphere","orbitGeometry","RingGeometry","Math","sqrt","orbitMaterial","MeshBasicMaterial","side","DoubleSide","transparent","opacity","orbit","rotation","x","PI","mesh","time","animate","requestAnimationFrame","forEach","index","speed","cos","sin","update","render","handleResize","width","height","aspect","updateProjectionMatrix","window","addEventListener","_mountRef$current","removeEventListener","removeChild","ref","w","h","borderRadius","overflow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sitewang/github_hackathon/client/src/components/InterstellarMap.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box } from '@chakra-ui/react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\ninterface Planet {\n  name: string;\n  position: [number, number, number];\n  radius: number;\n  color: string;\n  realRadius: number;  // km\n  distanceFromSun: number;  // AU\n  orbitalPeriod: number;  // Earth years\n}\n\n// Planet data sourced from NASA's planetary fact sheets\nconst planets: Planet[] = [\n  { \n    name: 'Mercury',\n    position: [1.5, 0, 0],\n    radius: 0.4,\n    color: '#A0522D',\n    realRadius: 2439.7,\n    distanceFromSun: 0.387,\n    orbitalPeriod: 0.24,\n  },\n  { \n    name: 'Venus',\n    position: [2.8, 0, 0],\n    radius: 0.9,\n    color: '#DEB887',\n    realRadius: 6051.8,\n    distanceFromSun: 0.723,\n    orbitalPeriod: 0.62,\n  },\n  { \n    name: 'Earth',\n    position: [4, 0, 0],\n    radius: 1,\n    color: '#1a75ff',\n    realRadius: 6371,\n    distanceFromSun: 1,\n    orbitalPeriod: 1,\n  },\n  { \n    name: 'Mars',\n    position: [5.5, 0, 0],\n    radius: 0.5,\n    color: '#ff4d4d',\n    realRadius: 3389.5,\n    distanceFromSun: 1.524,\n    orbitalPeriod: 1.88,\n  },\n  { \n    name: 'Jupiter',\n    position: [8, 0, 0],\n    radius: 2,\n    color: '#ffcc00',\n    realRadius: 69911,\n    distanceFromSun: 5.203,\n    orbitalPeriod: 11.86,\n  },\n  { \n    name: 'Saturn',\n    position: [11, 0, 0],\n    radius: 1.8,\n    color: '#F4D03F',\n    realRadius: 58232,\n    distanceFromSun: 9.537,\n    orbitalPeriod: 29.46,\n  },\n  { \n    name: 'Uranus',\n    position: [14, 0, 0],\n    radius: 1.2,\n    color: '#85C1E9',\n    realRadius: 25362,\n    distanceFromSun: 19.191,\n    orbitalPeriod: 84.01,\n  },\n  { \n    name: 'Neptune',\n    position: [17, 0, 0],\n    radius: 1.2,\n    color: '#3498DB',\n    realRadius: 24622,\n    distanceFromSun: 30.069,\n    orbitalPeriod: 164.79,\n  },\n];\n\nexport const InterstellarMap: React.FC = () => {\n  const mountRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color('#000000');\n    \n    const camera = new THREE.PerspectiveCamera(\n      75,\n      mountRef.current.clientWidth / mountRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    \n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light (Sun)\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(-5, 5, 0);\n    scene.add(directionalLight);\n\n    // Add the Sun\n    const sunGeometry = new THREE.SphereGeometry(1.5, 32, 32);\n    const sunMaterial = new THREE.MeshStandardMaterial({\n      color: 0xffff00,\n      emissive: 0xffff00,\n      emissiveIntensity: 1,\n      metalness: 0,\n      roughness: 1,\n    });\n    const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n    sun.position.set(-3, 0, 0);\n    scene.add(sun);\n\n    // Add point light at Sun's position\n    const sunLight = new THREE.PointLight(0xffffff, 2, 100);\n    sunLight.position.copy(sun.position);\n    scene.add(sunLight);\n\n    // Camera position\n    camera.position.z = 20;\n    camera.position.y = 10;\n    camera.lookAt(0, 0, 0);\n\n    // Add OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.maxDistance = 50;\n    controls.minDistance = 5;\n\n    // Add planets\n    const planetMeshes = planets.map(planet => {\n      const geometry = new THREE.SphereGeometry(planet.radius, 32, 32);\n      const material = new THREE.MeshStandardMaterial({\n        color: planet.color,\n        roughness: 0.7,\n        metalness: 0.3,\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set(...planet.position);\n      scene.add(sphere);\n\n      // Add orbit line\n      const orbitGeometry = new THREE.RingGeometry(\n        Math.sqrt(planet.position[0] ** 2 + planet.position[2] ** 2) - 0.1,\n        Math.sqrt(planet.position[0] ** 2 + planet.position[2] ** 2) + 0.1,\n        64\n      );\n      const orbitMaterial = new THREE.MeshBasicMaterial({\n        color: 0x444444,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.3,\n      });\n      const orbit = new THREE.Mesh(orbitGeometry, orbitMaterial);\n      orbit.rotation.x = Math.PI / 2;\n      scene.add(orbit);\n\n      return { mesh: sphere, orbitalPeriod: planet.orbitalPeriod };\n    });\n\n    // Animation loop\n    let time = 0;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      time += 0.005;\n\n      // Rotate planets\n      planetMeshes.forEach((planet, index) => {\n        const speed = 0.1 / planet.orbitalPeriod;\n        const radius = planets[index].position[0];\n        planet.mesh.position.x = Math.cos(time * speed) * radius;\n        planet.mesh.position.z = Math.sin(time * speed) * radius;\n        planet.mesh.rotation.y += 0.01;\n      });\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!mountRef.current) return;\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current?.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return (\n    <Box\n      ref={mountRef}\n      w=\"100%\"\n      h=\"100%\"\n      borderRadius=\"xl\"\n      overflow=\"hidden\"\n      position=\"relative\"\n    />\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}