{"ast":null,"code":"var _jsxFileName = \"/Users/sitewang/github_hackathon/client/src/components/InterstellarMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Box } from '@chakra-ui/react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Scale down distances for visualization (1 AU = 1 unit in our visualization)\nconst SCALE_FACTOR = 0.5;\nconst ORBIT_SCALE = 2;\nconst celestialBodies = [\n// Solar System\n{\n  name: 'Sun',\n  position: [0, 0, 0],\n  radius: 0.5,\n  color: '#ffff00',\n  type: 'star',\n  orbitRadius: 0,\n  orbitalPeriod: 0\n}, {\n  name: 'Mercury',\n  position: [0.387 * ORBIT_SCALE, 0, 0],\n  radius: 0.08,\n  color: '#A0522D',\n  type: 'planet',\n  orbitRadius: 0.387 * ORBIT_SCALE,\n  orbitalPeriod: 0.24\n}, {\n  name: 'Venus',\n  position: [0.723 * ORBIT_SCALE, 0, 0],\n  radius: 0.18,\n  color: '#DEB887',\n  type: 'planet',\n  orbitRadius: 0.723 * ORBIT_SCALE,\n  orbitalPeriod: 0.62\n}, {\n  name: 'Earth',\n  position: [1 * ORBIT_SCALE, 0, 0],\n  radius: 0.19,\n  color: '#1a75ff',\n  type: 'planet',\n  orbitRadius: 1 * ORBIT_SCALE,\n  orbitalPeriod: 1\n}, {\n  name: 'Mars',\n  position: [1.524 * ORBIT_SCALE, 0, 0],\n  radius: 0.1,\n  color: '#ff4d4d',\n  type: 'planet',\n  orbitRadius: 1.524 * ORBIT_SCALE,\n  orbitalPeriod: 1.88\n}, {\n  name: 'Jupiter',\n  position: [5.203 * ORBIT_SCALE, 0, 0],\n  radius: 0.4,\n  color: '#ffcc00',\n  type: 'planet',\n  orbitRadius: 5.203 * ORBIT_SCALE,\n  orbitalPeriod: 11.86\n}, {\n  name: 'Saturn',\n  position: [9.537 * ORBIT_SCALE, 0, 0],\n  radius: 0.35,\n  color: '#F4D03F',\n  type: 'planet',\n  orbitRadius: 9.537 * ORBIT_SCALE,\n  orbitalPeriod: 29.46\n}, {\n  name: 'Uranus',\n  position: [19.191 * ORBIT_SCALE, 0, 0],\n  radius: 0.25,\n  color: '#85C1E9',\n  type: 'planet',\n  orbitRadius: 19.191 * ORBIT_SCALE,\n  orbitalPeriod: 84.01\n}, {\n  name: 'Neptune',\n  position: [30.069 * ORBIT_SCALE, 0, 0],\n  radius: 0.24,\n  color: '#3498DB',\n  type: 'planet',\n  orbitRadius: 30.069 * ORBIT_SCALE,\n  orbitalPeriod: 164.79\n},\n// Nearby visible stars (scaled down significantly for visualization)\n{\n  name: 'Proxima Centauri',\n  position: [35 * ORBIT_SCALE, 0, 0],\n  radius: 0.3,\n  color: '#ff6b6b',\n  type: 'star',\n  orbitRadius: 35 * ORBIT_SCALE,\n  orbitalPeriod: 0\n}, {\n  name: 'Alpha Centauri A',\n  position: [36 * ORBIT_SCALE, 2, 0],\n  radius: 0.4,\n  color: '#ffd700',\n  type: 'star',\n  orbitRadius: 36 * ORBIT_SCALE,\n  orbitalPeriod: 0\n}, {\n  name: 'Sirius',\n  position: [37 * ORBIT_SCALE, -1, 0],\n  radius: 0.45,\n  color: '#ffffff',\n  type: 'star',\n  orbitRadius: 37 * ORBIT_SCALE,\n  orbitalPeriod: 0\n}];\nexport const InterstellarMap = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color('#000000');\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.2);\n    scene.add(ambientLight);\n\n    // Add the Sun's light\n    const sunLight = new THREE.PointLight(0xffffff, 2, 100);\n    sunLight.position.set(0, 0, 0);\n    scene.add(sunLight);\n\n    // Add celestial bodies\n    const bodies = celestialBodies.map(body => {\n      const geometry = new THREE.SphereGeometry(body.radius, 32, 32);\n      let material;\n      if (body.name === 'Sun') {\n        material = new THREE.MeshStandardMaterial({\n          color: body.color,\n          emissive: body.color,\n          emissiveIntensity: 1,\n          metalness: 0,\n          roughness: 1\n        });\n      } else if (body.type === 'star') {\n        material = new THREE.MeshStandardMaterial({\n          color: body.color,\n          emissive: body.color,\n          emissiveIntensity: 0.5,\n          metalness: 0.3,\n          roughness: 0.7\n        });\n      } else {\n        material = new THREE.MeshStandardMaterial({\n          color: body.color,\n          roughness: 0.7,\n          metalness: 0.3\n        });\n      }\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(...body.position);\n      scene.add(mesh);\n\n      // Add orbit line if it's a planet\n      if (body.type === 'planet') {\n        const orbitGeometry = new THREE.RingGeometry(body.orbitRadius - 0.1, body.orbitRadius + 0.1, 64);\n        const orbitMaterial = new THREE.MeshBasicMaterial({\n          color: 0x444444,\n          side: THREE.DoubleSide,\n          transparent: true,\n          opacity: 0.3\n        });\n        const orbit = new THREE.Mesh(orbitGeometry, orbitMaterial);\n        orbit.rotation.x = Math.PI / 2;\n        scene.add(orbit);\n      }\n      return {\n        mesh,\n        orbitalPeriod: body.orbitalPeriod,\n        orbitRadius: body.orbitRadius\n      };\n    });\n\n    // Camera position\n    camera.position.set(20, 15, 40);\n    camera.lookAt(0, 0, 0);\n\n    // Add OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.maxDistance = 100;\n    controls.minDistance = 5;\n\n    // Animation loop\n    let time = 0;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      time += 0.002;\n\n      // Rotate planets\n      bodies.forEach((body, index) => {\n        if (body.orbitalPeriod > 0) {\n          const speed = 0.1 / body.orbitalPeriod;\n          body.mesh.position.x = Math.cos(time * speed) * body.orbitRadius;\n          body.mesh.position.z = Math.sin(time * speed) * body.orbitRadius;\n          body.mesh.rotation.y += 0.01;\n        }\n      });\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!mountRef.current) return;\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      var _mountRef$current;\n      window.removeEventListener('resize', handleResize);\n      (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: mountRef,\n    w: \"100%\",\n    h: \"100%\",\n    borderRadius: \"xl\",\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n_s(InterstellarMap, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = InterstellarMap;\nvar _c;\n$RefreshReg$(_c, \"InterstellarMap\");","map":{"version":3,"names":["React","useEffect","useRef","Box","THREE","OrbitControls","jsxDEV","_jsxDEV","SCALE_FACTOR","ORBIT_SCALE","celestialBodies","name","position","radius","color","type","orbitRadius","orbitalPeriod","InterstellarMap","_s","mountRef","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","ambientLight","AmbientLight","add","sunLight","PointLight","set","bodies","map","body","geometry","SphereGeometry","material","MeshStandardMaterial","emissive","emissiveIntensity","metalness","roughness","mesh","Mesh","orbitGeometry","RingGeometry","orbitMaterial","MeshBasicMaterial","side","DoubleSide","transparent","opacity","orbit","rotation","x","Math","PI","lookAt","controls","enableDamping","dampingFactor","maxDistance","minDistance","time","animate","requestAnimationFrame","forEach","index","speed","cos","z","sin","y","update","render","handleResize","width","height","aspect","updateProjectionMatrix","window","addEventListener","_mountRef$current","removeEventListener","removeChild","ref","w","h","borderRadius","overflow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sitewang/github_hackathon/client/src/components/InterstellarMap.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Box } from '@chakra-ui/react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\ninterface CelestialBody {\n  name: string;\n  position: [number, number, number];\n  radius: number;\n  color: string;\n  type: 'planet' | 'star' | 'system';\n  orbitRadius: number;\n  orbitalPeriod: number;\n}\n\n// Scale down distances for visualization (1 AU = 1 unit in our visualization)\nconst SCALE_FACTOR = 0.5;\nconst ORBIT_SCALE = 2;\n\nconst celestialBodies: CelestialBody[] = [\n  // Solar System\n  { \n    name: 'Sun',\n    position: [0, 0, 0],\n    radius: 0.5,\n    color: '#ffff00',\n    type: 'star',\n    orbitRadius: 0,\n    orbitalPeriod: 0,\n  },\n  { \n    name: 'Mercury',\n    position: [0.387 * ORBIT_SCALE, 0, 0],\n    radius: 0.08,\n    color: '#A0522D',\n    type: 'planet',\n    orbitRadius: 0.387 * ORBIT_SCALE,\n    orbitalPeriod: 0.24,\n  },\n  { \n    name: 'Venus',\n    position: [0.723 * ORBIT_SCALE, 0, 0],\n    radius: 0.18,\n    color: '#DEB887',\n    type: 'planet',\n    orbitRadius: 0.723 * ORBIT_SCALE,\n    orbitalPeriod: 0.62,\n  },\n  { \n    name: 'Earth',\n    position: [1 * ORBIT_SCALE, 0, 0],\n    radius: 0.19,\n    color: '#1a75ff',\n    type: 'planet',\n    orbitRadius: 1 * ORBIT_SCALE,\n    orbitalPeriod: 1,\n  },\n  { \n    name: 'Mars',\n    position: [1.524 * ORBIT_SCALE, 0, 0],\n    radius: 0.1,\n    color: '#ff4d4d',\n    type: 'planet',\n    orbitRadius: 1.524 * ORBIT_SCALE,\n    orbitalPeriod: 1.88,\n  },\n  { \n    name: 'Jupiter',\n    position: [5.203 * ORBIT_SCALE, 0, 0],\n    radius: 0.4,\n    color: '#ffcc00',\n    type: 'planet',\n    orbitRadius: 5.203 * ORBIT_SCALE,\n    orbitalPeriod: 11.86,\n  },\n  { \n    name: 'Saturn',\n    position: [9.537 * ORBIT_SCALE, 0, 0],\n    radius: 0.35,\n    color: '#F4D03F',\n    type: 'planet',\n    orbitRadius: 9.537 * ORBIT_SCALE,\n    orbitalPeriod: 29.46,\n  },\n  { \n    name: 'Uranus',\n    position: [19.191 * ORBIT_SCALE, 0, 0],\n    radius: 0.25,\n    color: '#85C1E9',\n    type: 'planet',\n    orbitRadius: 19.191 * ORBIT_SCALE,\n    orbitalPeriod: 84.01,\n  },\n  { \n    name: 'Neptune',\n    position: [30.069 * ORBIT_SCALE, 0, 0],\n    radius: 0.24,\n    color: '#3498DB',\n    type: 'planet',\n    orbitRadius: 30.069 * ORBIT_SCALE,\n    orbitalPeriod: 164.79,\n  },\n  // Nearby visible stars (scaled down significantly for visualization)\n  {\n    name: 'Proxima Centauri',\n    position: [35 * ORBIT_SCALE, 0, 0],\n    radius: 0.3,\n    color: '#ff6b6b',\n    type: 'star',\n    orbitRadius: 35 * ORBIT_SCALE,\n    orbitalPeriod: 0,\n  },\n  {\n    name: 'Alpha Centauri A',\n    position: [36 * ORBIT_SCALE, 2, 0],\n    radius: 0.4,\n    color: '#ffd700',\n    type: 'star',\n    orbitRadius: 36 * ORBIT_SCALE,\n    orbitalPeriod: 0,\n  },\n  {\n    name: 'Sirius',\n    position: [37 * ORBIT_SCALE, -1, 0],\n    radius: 0.45,\n    color: '#ffffff',\n    type: 'star',\n    orbitRadius: 37 * ORBIT_SCALE,\n    orbitalPeriod: 0,\n  }\n];\n\nexport const InterstellarMap: React.FC = () => {\n  const mountRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color('#000000');\n    \n    const camera = new THREE.PerspectiveCamera(\n      75,\n      mountRef.current.clientWidth / mountRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    \n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.2);\n    scene.add(ambientLight);\n\n    // Add the Sun's light\n    const sunLight = new THREE.PointLight(0xffffff, 2, 100);\n    sunLight.position.set(0, 0, 0);\n    scene.add(sunLight);\n\n    // Add celestial bodies\n    const bodies = celestialBodies.map(body => {\n      const geometry = new THREE.SphereGeometry(body.radius, 32, 32);\n      let material;\n      \n      if (body.name === 'Sun') {\n        material = new THREE.MeshStandardMaterial({\n          color: body.color,\n          emissive: body.color,\n          emissiveIntensity: 1,\n          metalness: 0,\n          roughness: 1,\n        });\n      } else if (body.type === 'star') {\n        material = new THREE.MeshStandardMaterial({\n          color: body.color,\n          emissive: body.color,\n          emissiveIntensity: 0.5,\n          metalness: 0.3,\n          roughness: 0.7,\n        });\n      } else {\n        material = new THREE.MeshStandardMaterial({\n          color: body.color,\n          roughness: 0.7,\n          metalness: 0.3,\n        });\n      }\n\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(...body.position);\n      scene.add(mesh);\n\n      // Add orbit line if it's a planet\n      if (body.type === 'planet') {\n        const orbitGeometry = new THREE.RingGeometry(\n          body.orbitRadius - 0.1,\n          body.orbitRadius + 0.1,\n          64\n        );\n        const orbitMaterial = new THREE.MeshBasicMaterial({\n          color: 0x444444,\n          side: THREE.DoubleSide,\n          transparent: true,\n          opacity: 0.3,\n        });\n        const orbit = new THREE.Mesh(orbitGeometry, orbitMaterial);\n        orbit.rotation.x = Math.PI / 2;\n        scene.add(orbit);\n      }\n\n      return { mesh, orbitalPeriod: body.orbitalPeriod, orbitRadius: body.orbitRadius };\n    });\n\n    // Camera position\n    camera.position.set(20, 15, 40);\n    camera.lookAt(0, 0, 0);\n\n    // Add OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.maxDistance = 100;\n    controls.minDistance = 5;\n\n    // Animation loop\n    let time = 0;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      time += 0.002;\n\n      // Rotate planets\n      bodies.forEach((body, index) => {\n        if (body.orbitalPeriod > 0) {\n          const speed = 0.1 / body.orbitalPeriod;\n          body.mesh.position.x = Math.cos(time * speed) * body.orbitRadius;\n          body.mesh.position.z = Math.sin(time * speed) * body.orbitRadius;\n          body.mesh.rotation.y += 0.01;\n        }\n      });\n\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!mountRef.current) return;\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current?.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  return (\n    <Box\n      ref={mountRef}\n      w=\"100%\"\n      h=\"100%\"\n      borderRadius=\"xl\"\n      overflow=\"hidden\"\n      position=\"relative\"\n    />\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}